// my code : 
ListNode* rev(ListNode* root){
    if(root==NULL)return NULL ;
    if(root->next == NULL ) return root;
    ListNode* t = rev(root->next);
    ListNode* d = root;
    root->next->next=root;
    d->next = NULL ;
    return t ;
}
bool solve(ListNode* head1 , ListNode* head2){
    if(head1==NULL || head2==NULL) return true ;
    if(head1->val != head2->val) return false  ;
    return solve(head1->next , head2->next );
}
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL && head->next == NULL) return head ;
        ListNode* slow = head , *fast = head ;
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next ;
            fast = fast->next->next ;
        }
        fast = rev(slow);
        return solve(head , fast);
    }
};

// ideal code : 

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        
        ListNode* slow;
        ListNode* fast;
        ListNode* prev=NULL;
        slow=fast=head;
        
        // reverse the linked list till mid
        while(1)
        {
            if(!fast)
            {
                fast=slow;
                break;
            }
            if(!fast->next)
            {
                fast=slow->next;
                break;
            }
              fast=fast->next->next;
            ListNode* temp;
            temp=slow->next;
            slow->next=prev;
            prev=slow;
           
            slow=temp;
        }
        
        slow=prev;
        
        //compare till one of the node values is different or either list is exhausted
        while(slow)
        {
            if(fast->val!=slow->val)
                return false;
            
            fast=fast->next;
            slow=slow->next;
        }
        return true;
    }
};
