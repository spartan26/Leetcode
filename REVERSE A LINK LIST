// RECCURSIVE APPROACK 
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL)return head ;
        if(head->next==NULL)return head;
        ListNode* h , *t;
        h = reverseList(head->next);
        t=head->next;
        t->next = head ;
        head->next = NULL;
        return h ;
    }
};
// idead approach 
void rev(ListNode* head){
    ListNode* prev = NULL, *next=NULL ;
    while(head!=NULL){
    next = head->next;
    head->next=prev;
    prev=head;
    head=next ;
    }
}

// ITERATIVE APPROACK
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL)return head ;
        if(head->next==NULL)return head;
        ListNode *a , *b , *c;
        a=NULL;
        b= head ;
        c = head->next ;
        while(b!=NULL){
            c=b->next ;
            b->next = a;
            a=b;
            b=c;
        }
        return a;
    }
};
