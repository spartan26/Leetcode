// my code :
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n<1)return false ;
        if(n==1)return true ;
        if(n%2==1)return false ;
        return isPowerOfTwo(n/2) ;
    }
};

// ideal code + approach :
2. Using Reminder-divident method via Recursion:-

class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n==0) return false;
        return ((n==1) || (n%2==0 && isPowerOfTwo(n/2)));
    }
};
Time Complexity : O(logn)
Space Complexity : O(logn) [Rcursive stack is counted]

3. Bit manipulation :-
Tip: Always remember that bit manipulation techniques are usually based on observations from multiple examples
bit representation of 7  -> 0111
bit representation of 8  -> 1000
bitwise AND of 7 and 8 -> 0000
we are gonna use this property for for all numbers which are powers of two
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n<=0) return false;
        return ((n&(n-1))==0);
    }
};
Time Complexity : O(1)
Space Complexity : O(1)

4. Using ceil-floor method

class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0) return false;
        return ceil(log2(n)) == floor(log2(n));
    }
};
Time Complexity : O(logn)
Space Complexity : O(1)

5. Using C++ STL 

class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n<0)return false;
        
        int bits=__builtin_popcount(n);
        
        if(bits==1)
            return true;
        return false;
    }
};


